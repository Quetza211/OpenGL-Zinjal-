#include <stdio.h>
#include <stdlib.h>
#ifdef _APPLE_
# include <OpenGL/gl.h>
# include <OpenGL/glu.h>
# include <GLUT/glut.h>
#else
# include <GL/gl.h>
# include <GL/glu.h>
# include <GL/glut.h>
#endif
//TIENE UN PEQUEÑO ERROR CREO REVISAR DONDE ESTAN LAS FIGURAS GUARDADAS
GLint winWidth = 600, winHeight = 600;//Tamaño de la pantalla

GLfloat cam_posiX = 100, cam_posiY = 100.0, cam_posiZ = 100.0;
GLfloat centerX = 0.0, centerY = 0.0, centerZ = 0.0;
GLfloat cam_lookX = 0.0, cam_lookY = 1.0, cam_lookZ = 0.0;

GLfloat xwMin = -40.0, ywMin = -40.0, xwMax = 40.0, ywMax = 40.0;// Establece limites de coordenadas para ventana de recorte
GLfloat dnear = 1.0, dfar = 800.0;//Establece posicion de los planos de recorte proximo y lejano

void init(void) {
	glClearColor(1.0, 1.0, 1.0, 0.0);
	glMatrixMode(GL_MODELVIEW); //Modifica la posicion de la camara
	gluLookAt(cam_posiX, cam_posiY, cam_posiZ, centerX, centerY, centerZ, cam_lookX, cam_lookY, cam_lookZ);
	glMatrixMode(GL_PROJECTION);
	glOrtho(xwMin, xwMax, ywMin, ywMax, dnear, dfar);
}

void displayFcn(void){ //SOLO DIBUJA
	glClear(GL_COLOR_BUFFER_BIT);
	glColor3f(1.0, 0.0, 1.0);//Figura 1
	glPushMatrix();
	glTranslatef(0.0, 0.0, 0.0);
	glScalef(4.5,4.5,4.5);
	glutWireTetrahedron();
	glPopMatrix();
	
	glColor3f(0.0,0.0,0.0);//Figura 2
	glPushMatrix();
	glTranslatef(-25.0, 0.0, -25.0);
	glScalef(4.0,4.0,4.0);
	glutWireDodecahedron();
	glPopMatrix();
	
	glColor3f(1.0, 0.0, 0.0);//Figura 3
	glPushMatrix();
	glTranslatef(22.0, 0.0, 0.0);
	glScalef(4.0,4.0,4.0);
	glutWireOctahedron();
	glPopMatrix();
	glFlush();
}

void reshapeFcn(GLint newWidth, GLint newHeight) {
	glViewport(0, 0, newWidth, newHeight);
	winWidth = newWidth;
	winHeight = newHeight;
}

void parallelTopView() {
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	gluLookAt(0.0, 100.0, 0.0, centerX, centerY, centerZ, 0.0, 0.0, -1.0);
}

void parallelFrontView() {
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	gluLookAt(0.0, 0.0, 100.0, centerX, centerY, centerZ, 0.0, 1.0, 0.0);
}

void parallelSideView() {
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	gluLookAt(100.0, 0.0, 0.0, centerX, centerY, centerZ, 0.0, 1.0, 0.0);
}

void isometricView() {
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	gluLookAt(100.0, 100.0, 100.0, centerX, centerY, centerZ, 0.0, 1.0, 0.0);
}

void perspectiveView() {
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(45.0, (GLfloat)winWidth / (GLfloat)winHeight, 1.0, 800.0);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	gluLookAt(cam_posiX, cam_posiY, cam_posiZ, centerX, centerY, centerZ, cam_lookX, cam_lookY, cam_lookZ);
}

void keyboardFunc(unsigned char key, int x, int y) {
	switch (key) {
	case 't':
		parallelTopView();
		break;
	case 'f':
		parallelFrontView();
		break;
	case 's': //x
		parallelSideView();
		break;
	case 'i':
		isometricView();
		break;
	case 'p':
		perspectiveView();
		break;
	}
	
	glutPostRedisplay();
}

int main(int argc, char** argv) {
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowPosition(50, 50);
	glutInitWindowSize(winWidth, winHeight);
	glutCreateWindow("Proyección Isométrica");
	
	init();
	glutDisplayFunc(displayFcn);
	glutReshapeFunc(reshapeFcn);
	glutKeyboardFunc(keyboardFunc);
	glutMainLoop();
	
	return 0;
}
